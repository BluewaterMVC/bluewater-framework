@abstract void  * Document an abstract class, class variable or method  * Use the @abstract tag to declare a method, class variable, or class that must be re-defined in a child class to be valid.  * Used to declare class methods a "place holders" only.   These methods *must* be defined in child classes.@access private|protected|public  * Access control for an element. @access private prevents documentation of the following element (if enabled).  * If @access is private, the element will not be documented.  * This element will be ignored and not show up in the generated docs@author author name <authoremail@example.com>  * Author of current element  * The @author tag is used to document the author of any element that can be documented (global variable, include, constant, function, define, class, variable, method, page).   phpDocumentor will take any text between angle brackets and try to parse it as an email address. If successful, it will be displayed with a mailto link in the page.  * Defines who made what. Even makes a mailto link.@category categoryname  * Specify a category to organize the documented element's package into  * The @category tag is used to organize groups of packages together.    This is directly applicable to the XML:DocBook/peardoc2 Converter, and can be used by other converters. Other Converters packaged with phpDocumentor ignore the category, but this may change in future versions.  * Used to catagorize methods, classes, etc.@copyright copyright information  * Document Copyright information  * The @copyright tag is used to document the copyright information of any element that can be documented (global variable, include, constant, function, define, class, variable, method, page).   phpDocumentor will display the copyright string unaltered.  * Copyright info for any element   Goes along with @author@deprecated version/info string  * Document elements that have been deprecated and should not be used as they may be removed at any time from a future version  * The @deprecated tag is used to document the deprecation version or other information of any element that can be documented except for page (global variable, include, constant, function, define, class, variable, method).   If present, phpDocumentor will display the optional version/info string unaltered.   Use @deprecated to notify users of deprecated elements that should not be used any longer  * To signify that this element is not to be used anymore@example /path/to/example.php description         url://path/to/example.php description         relativepath/to/example.php description  * Include an external example file with syntax highlighting  * The example tag can be used to parse an example file for syntax highlighting and linking to documentation. This versatile tag attempts to read the file from the full path specified, and will accept any path that        http://www.php.net/fopen will accept.   phpDocumentor checks the path to ensure that the file retrieved has a valid .php extension as defined in phpDocumentor.ini, and then opens the file. It will parse the file, and output syntax-highlighted source with line numbers, links to documentation and will then add a link to the documentation to that file.  * define an example page to parse and insert into generated doc@final void  * Document a class method that should never be overridden in a child class  * Use the @final tag to declare a method that cannot be overridden in a child class.  * Don't override this Class method, or else!@filesource void  * create a syntax-highlighted cross-referenced file containing source code of the current file and link to it  * The @filesource tag can only be used in a page-level DocBlock, it will be ignored anywhere else. phpDocumentor parses the file source of the current file, and outputs syntax-highlighted source code with line numbers, links to documentation and then adds a link to the generated file in the documentation.

  The @example tag serves a similar purpose, but is designed to parse and create a link to an external example file.@global datatype $globalvariablename@global datatype description  * Document a global variable, or its use in a function/method  * variable name and desc can NOT be on the same line@ignore void  * Prevent documentation of an element  * Use @ignore to prevent phpDocumentor from documenting an element, such as a duplicate element.  * Don't bother with this item@internal string  * Mark documentation as private, internal to the software project  * Use @internal to facilitate the creation of two sets of documentation, one for advanced developers or for internal company use, and the other for the general PHP public.@license URL name of license  * Display a hyperlink to a URL for a license  * You may use the @license tag to document any element (include, page, class, function, define, method, variable)  * URL to license file@link URL link text@link URL, URL, URL...  * Display a hyperlink to a URL in the documentation@name $globalvariablename  * Specify an alias to use for a procedural page or global variable in displayed documentation and linking  * phpDocumentor recognizes the @name tag in global variable DocBlocks (in conjunction with @global), and uses it to rename a global variable for documentation to make it more readable. A global variable name MUST begin with a dollar sign ($) or phpDocumentor will ignore the tag and raise an error.@package packagename  * Specify package to group classes or functions and defines into  * Packages are used to help you logically group related elements.   You write classes to group related functions and data together, and phpDocumentor represents the contents of files (functions, defines, and includes) as "Procedural Pages." A package is used to group classes and procedural pages together in the same manner that a directory groups related files together.@param datatype $paramname description  * Document a function parameter  * datatype should be a valid PHP type or "mixed."

@property datatype $varname description
@property-read datatype $varname description@property-write datatype $varname description
  * Not for use on class variable docBlocks; only for classes.
  * Document a class variable as a "magic" property, i.e. magically accessible with __get() and/or __set() with a call like $foo->bar
@return datatype description  * Specify the return type of a function or method  * datatype should be a valid PHP type or "mixed."  * If a class name is used in the @return tag, phpDocumentor will automatically create a link to that class's documentation.   In addition, if a function returns multiple possible values, separate them using the | character, and phpDocumentor will parse out any class names in the return value. phpDocumentor will display the optional description unmodified@see file.ext     |elementname     |class::methodname()     |class::$variablename     |functionname()     |function functionname unlimited number of values separated by commas  * Display a link to the documentation for an element@since version/info string  * Document when (at which version) an element was first added to a package@static void  * Document a static class or method  * Use the @static tag to declare a method or class to be static.   Static elements can be called without reference to an instantiated class variable, as in class::method().@staticvar datatype description  * Document a static variable's use in a function/method  * Datatype should be a valid PHP type or "mixed."  * phpDocumentor will display the optional description unmodified@subpackage subpackagename  * Specify sub-package to group classes or functions and defines into  * @subpackage works with @package to group php files together for documentation.@todo string  * Document changes that will be made in the future  * what you want to do with this element/section in future@tutorial package/ subpackage/ tutorialname.ext #section.subsection description  * Display a link to the documentation for a tutorial@uses file.ext     |elementname     |class::methodname()     |class::$variablename     |functionname()     |function functionname description of how the element is used  * Display a link to the documentation for an element, and create a backlink in the other element's documentation to this@var datatype description  * Document the data type of a class variable  * Datatype should be a valid PHP type or "mixed."@version versionstring  * Version of current element